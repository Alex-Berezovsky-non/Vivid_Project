from django.shortcuts import render, get_object_or_404, redirect
from django.views.generic import CreateView, TemplateView, ListView
from django.urls import reverse_lazy
from django.utils import timezone
from django.contrib import messages
from django.utils.translation import gettext_lazy as _
from django.db.models import Q
from django.core.exceptions import ValidationError
from django.conf import settings
import logging
import json
from urllib.request import urlopen, Request
from urllib.parse import urlencode
from urllib.error import URLError, HTTPError

from .models import Booking, TimeSlot
from .forms import BookingForm, TimeSlotSelectionForm

def send_telegram_alert(message):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º urllib
    """
    TELEGRAM_BOT_API_KEY = getattr(settings, 'TELEGRAM_BOT_API_KEY', None)
    TELEGRAM_USER_ID = getattr(settings, 'TELEGRAM_USER_ID', None)
    
    if not TELEGRAM_BOT_API_KEY or not TELEGRAM_USER_ID:
        logger = logging.getLogger(__name__)
        logger.warning("Telegram credentials not configured")
        return False
    
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_API_KEY}/sendMessage"
    
    data = {
        'chat_id': TELEGRAM_USER_ID,
        'text': message,
        'parse_mode': 'Markdown'
    }
    
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ bytes
        data_bytes = urlencode(data).encode('utf-8')
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å
        request = Request(url, data=data_bytes, method='POST')
        request.add_header('Content-Type', 'application/x-www-form-urlencoded')
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        with urlopen(request, timeout=10) as response:
            response_data = response.read().decode('utf-8')
            result = json.loads(response_data)
            
            if result.get('ok'):
                return True
            else:
                logger = logging.getLogger(__name__)
                logger.error(f"Telegram API error: {result.get('description')}")
                return False
                
    except (URLError, HTTPError) as e:
        logger = logging.getLogger(__name__)
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return False
    except Exception as e:
        logger = logging.getLogger(__name__)
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

class TimeSlotSelectionView(TemplateView):
    """–í—ã–±–æ—Ä –¥–∞—Ç—ã –∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –≤—Ä–µ–º–µ–Ω–∏"""
    template_name = 'bookings/calendar.html'
    
    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['form'] = TimeSlotSelectionForm()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –∏–∑ GET-–ø–∞—Ä–∞–º–µ—Ç—Ä–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
        selected_date = self.request.GET.get('date')
        if selected_date:
            try:
                from datetime import datetime
                selected_date = datetime.strptime(selected_date, '%Y-%m-%d').date()
                context['selected_date'] = selected_date
                
                # –í–†–ï–ú–ï–ù–ù–û: —Ç–æ–ª—å–∫–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–∞—Ç—ã
                available_slots = TimeSlot.objects.filter(
                    date_type='specific',
                    specific_date=selected_date,
                    is_available=True
                )
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é –∑–∞–Ω—è—Ç—ã–µ —Å–ª–æ—Ç—ã
                available_slots = [slot for slot in available_slots if not slot.is_fully_booked()]
                context['available_slots'] = available_slots
                
            except ValueError:
                messages.error(self.request, _("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏"))
        
        return context

class BookingCreateView(CreateView):
    """–°–æ–∑–¥–∞–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    model = Booking
    form_class = BookingForm
    template_name = 'bookings/form.html'
    
    def dispatch(self, request, *args, **kwargs):
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º time_slot –î–û –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
        slot_id = kwargs.get('slot_id')
        self.time_slot = get_object_or_404(TimeSlot, id=slot_id, is_available=True)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–ª–æ—Ç–∞
        if self.time_slot.is_fully_booked():
            messages.error(request, _("–≠—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–ª–æ—Ç —É–∂–µ –∑–∞–Ω—è—Ç"))
            return redirect('bookings:calendar')
        
        return super().dispatch(request, *args, **kwargs)
    
    def get_form_kwargs(self):
        kwargs = super().get_form_kwargs()
        kwargs['time_slot'] = self.time_slot
        return kwargs
    
    def get_initial(self):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ñ–æ—Ä–º—ã"""
        initial = super().get_initial()
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        return initial
    
    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context['time_slot'] = self.time_slot
        return context
    
    def form_valid(self, form):
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è, –Ω–æ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
        booking = form.save(commit=False)
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ time_slot –ü–ï–†–ï–î —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
        booking.time_slot = self.time_slot
        
        # –í–ê–õ–ò–î–ê–¶–ò–Ø: –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ª–æ—Ç –≤—Å–µ –µ—â–µ –¥–æ—Å—Ç—É–ø–µ–Ω
        if self.time_slot.is_fully_booked():
            messages.error(self.request, _("–≠—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–ª–æ—Ç —É–∂–µ –∑–∞–Ω—è—Ç"))
            return redirect('bookings:calendar')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–∫—Ç –≤ –±–∞–∑—É
        try:
            booking.save()
        except ValidationError as e:
            # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            for error in e.messages:
                messages.error(self.request, error)
            return self.form_invalid(form)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–∫—Ç –≤ –∞—Ç—Ä–∏–±—É—Ç–µ view –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        self.object = booking
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
        try:
            telegram_msg = (
                f"üìÖ *–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –Ω–∞ —Å—ä–µ–º–∫—É!*\n\n"
                f"*–ò–º—è:* {booking.client_name}\n"
                f"*–¢–µ–ª–µ—Ñ–æ–Ω:* `{booking.client_phone}`\n"
                f"*Email:* `{booking.client_email}`\n"
                f"*–¢–∏–ø —Å—ä–µ–º–∫–∏:* {booking.get_shooting_type_display()}\n"
                f"*–í—Ä–µ–º—è:* {self.time_slot}\n"
                f"*–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:* `{booking.confirmation_code}`\n\n"
                f"*–°–æ–æ–±—â–µ–Ω–∏–µ:*\n{booking.message[:200]}"
            )
            send_telegram_alert(telegram_msg)
        except Exception as e:
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
            logger = logging.getLogger(__name__)
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        
        messages.success(
            self.request, 
            _("–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
        )
        
        return redirect(self.get_success_url())
    
    def get_success_url(self):
        return reverse_lazy('bookings:booking_done', kwargs={'code': self.object.confirmation_code})

class BookingDoneView(TemplateView):
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    template_name = 'bookings/booking_done.html'
    
    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        code = kwargs.get('code')
        context['booking'] = get_object_or_404(Booking, confirmation_code=code)
        return context

class BookingDetailView(TemplateView):
    """–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    template_name = 'bookings/booking_detail.html'
    
    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        code = kwargs.get('code')
        context['booking'] = get_object_or_404(Booking, confirmation_code=code)
        return context